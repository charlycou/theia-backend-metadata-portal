package fr.theia_land.in_situ.dataportal.controller;

import fr.theia_land.in_situ.dataportal.model.POJO.ResponseDocument;
import fr.theia_land.in_situ.dataportal.model.POJO.detail.dataset.SpatialExtent;
import fr.theia_land.in_situ.dataportal.model.POJO.detail.observation.TheiaVariable;
import fr.theia_land.in_situ.dataportal.model.POJO.detail.producer.Producer;
import fr.theia_land.in_situ.dataportal.model.POJO.facet.TheiaCategoryTree;
import fr.theia_land.in_situ.dataportal.model.POJO.popup.litePopup.PopupContent;
import fr.theia_land.in_situ.dataportal.model.entity.ObservationDocument;
import fr.theia_land.in_situ.dataportal.repository.ObservationDocumentLiteRepository;
import fr.theia_land.in_situ.dataportal.repository.ObservationDocumentRepository;
import fr.theia_land.in_situ.dataportal.service.*;
import org.bson.Document;
import org.hamcrest.core.IsNull;
import org.json.JSONArray;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.data.domain.Pageable;
import org.springframework.test.web.servlet.MockMvc;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import static org.hamcrest.Matchers.hasSize;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.*;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@WebMvcTest(controllers = ObservationsController.class)
public class ObservationsControllerTest {

    @Autowired
    private MockMvc mockMvc;

    @MockBean
    DetailService detailService;
    
    @MockBean
    FacetService facetService;
    
    @MockBean
    PageService pageService;
    
    @MockBean
    PopupService popupService;
    
    @MockBean
    SearchService searchService;



    @Test
    public void findByDocumentId() throws Exception {
        String documentIds = "[\"id1\",\"id2\"]";
        when(observationDocumentRepositoryMock.findByDocumentId(anyString()))
                .thenReturn(new ObservationDocument());
        this.mockMvc.perform(post("/observation/showObservationsDetailed")
                .content(documentIds)).andExpect(status().isOk())
                .andExpect(jsonPath("$", hasSize(2)));

        verify(observationDocumentRepositoryMock, times(2)).findByDocumentId(anyString());

    }

    @Test
    public void getObservationIdsOfOtherTheiaVariableAtLocation() throws Exception {
        when(observationDocumentLiteRepositoryMock.getObservationIdsOfOtherTheiaVariableAtLocation(anyString()))
                .thenReturn(Collections.singletonList("json"));
        this.mockMvc.perform(post("/observation/getObservationIdsOfOtherTheiaVariableAtLocation")
                .content("test"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$", hasSize(1)));

        verify(observationDocumentLiteRepositoryMock, times(1)).getObservationIdsOfOtherTheiaVariableAtLocation(anyString());
    }

    @Test
    public void getVariablesAtOneLocation() throws Exception {
        TheiaVariable theiaVariable = new TheiaVariable();
        when(observationDocumentLiteRepositoryMock.getVariablesAtOneLocation(anyString()))
                .thenReturn((List<TheiaVariable>) Collections.singletonList(theiaVariable));
        this.mockMvc.perform(post("/observation/getVariablesAtOneLocation")
                .content("payload"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$", hasSize(1)));

        verify(observationDocumentLiteRepositoryMock, times(1)).getVariablesAtOneLocation(anyString());
    }

    @Test
    public void getObservationsOfADataset() throws Exception {
        Document document = new Document();
        when(observationDocumentLiteRepositoryMock.getObservationsOfADataset(anyString()))
                .thenReturn((List<Document>) Collections.singletonList(document));
        this.mockMvc.perform(get("/observation/getObservationsOfADataset/datasetId"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$", hasSize(1)));

        verify(observationDocumentLiteRepositoryMock, times(1)).getObservationsOfADataset(anyString());
    }

    @Test
    public void getBBOXOfOfADataset() throws Exception {
        when(observationDocumentRepositoryMock.findDatasetSpatialExtent(anyString()))
                .thenReturn(new SpatialExtent());
        this.mockMvc.perform(get("/observation/getBBOXOfADataset/datasetId"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.geometry").value(IsNull.nullValue()))
                .andExpect(jsonPath("$.properties").value(IsNull.nullValue()))
                .andExpect(jsonPath("$.type").value(IsNull.nullValue()));

        verify(observationDocumentRepositoryMock, times(1)).findDatasetSpatialExtent(anyString());

    }

    @Test
    public void getCategoryHierarchies() throws Exception {
        List<String> payload = new ArrayList<String>() {
            {
                add("uri1");
                add("uri2");
            }
        };

        TheiaCategoryTree theiaCategoryTree = new TheiaCategoryTree();
        JSONArray jsonArray = new JSONArray(payload);
        when(observationDocumentRepositoryMock.getCategoryHierarchies(payload))
                .thenReturn((List<TheiaCategoryTree>) Collections.singletonList(theiaCategoryTree));
        this.mockMvc.perform(post("/observation/getCategoryHierarchies").content(jsonArray.toString()).contentType("application/json"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$", hasSize(1)));

        verify(observationDocumentRepositoryMock, times(1)).getCategoryHierarchies(payload);

    }

    @Test
    public void searchObservations() throws Exception {
        when(observationDocumentLiteRepositoryMock.searchObservations(anyString()))
                .thenReturn(new ResponseDocument());
        this.mockMvc.perform(post("/observation/searchObservations").content("payload"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.observationDocumentLitePage").value(IsNull.nullValue()))
                .andExpect(jsonPath("$.facetClassification").value(IsNull.nullValue()))
                .andExpect(jsonPath("$.mapItems").value(IsNull.nullValue()));

        verify(observationDocumentLiteRepositoryMock, times(1)).searchObservations(anyString());
    }

    @Test
    public void initFacets() throws Exception {
        this.mockMvc.perform(get("/observation/initFacets")).andExpect(status().isOk());
        verify(observationDocumentLiteRepositoryMock, times(1)).initFacets();
    }

    @Test
    public void getObservationsPage() throws Exception {
        this.mockMvc.perform(post("/observation/changeObservationsPage").content("{\n" +
                "\t\"filters\": {\n" +
                "\t\t\"payload\": \"test\"\n" +
                "\t},\n" +
                "\t\"pageSelected\": \"1\",\n" +
                "\t\"pageSize\":\"10\"\n" +
                "}"))
                .andExpect(status().isOk());
        verify(this.observationDocumentLiteRepositoryMock, times(1)).getObservationsPage(any(List.class), any(Pageable.class));
        verify(this.observationDocumentLiteRepositoryMock, times(1)).setMatchOperationUsingFilters(anyString(), eq(null));
    }

    @Test
    public void loadPopupContent() throws Exception {
        List<String> payload = new ArrayList<String>() {
            {
                add("id1");
                add("id2");
            }
        };
        JSONArray jsonArray = new JSONArray(payload);
        when(observationDocumentLiteRepositoryMock.loadPopupContent(any(List.class))).thenReturn(new PopupContent());
        this.mockMvc.perform(post("/observation/loadPopupContent").content(jsonArray.toString())
                .contentType("application/json"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.producerName").value(IsNull.nullValue()))
                .andExpect(jsonPath("$.stationName").value(IsNull.nullValue()))
                .andExpect(jsonPath("$.variableNameAndIds").value(IsNull.nullValue()));
        verify(this.observationDocumentLiteRepositoryMock, times(1)).loadPopupContent(any(List.class));
    }

    @Test
    public void getProducerInfo() throws Exception {
        when(observationDocumentRepositoryMock.getProducersInfo()).thenReturn(Collections.singletonList(new Producer()));
        this.mockMvc.perform(get("/observation/getProducersInfo")).andExpect(status().isOk())
                .andExpect(jsonPath("$", hasSize(1)));
        verify(this.observationDocumentRepositoryMock, times(1)).getProducersInfo();
    }

    @Test
    public void showProducerDetailed() throws Exception {
        when(observationDocumentRepositoryMock.getProducerDetailed(anyString())).thenReturn(new Producer());
        this.mockMvc.perform(get("/observation/showProducerDetailed/producerId")).andExpect(status().isOk())
                .andExpect(jsonPath("$.producerId").value(IsNull.nullValue()));
        verify(this.observationDocumentRepositoryMock, times(1)).getProducerDetailed(anyString());
    }

    @Test
    public void showDatasetDetailed() throws Exception {
        when(observationDocumentRepositoryMock.getDatasetDetailed(anyString())).thenReturn(new ObservationDocument());
        this.mockMvc.perform(get("/observation/showDatasetDetailed/datasetId")).andExpect(status().isOk())
                .andExpect(jsonPath("$.documentId").value(IsNull.nullValue()));
        verify(this.observationDocumentRepositoryMock, times(1)).getDatasetDetailed(anyString());
    }

    @Test
    public void getProducerPage() throws Exception {
        when(observationDocumentLiteRepositoryMock.getDatasetOrProducerIds(any(List.class))).thenReturn(Collections.singletonList(String.class));
        String payload = "{\"filters\":{\"temporalExtents\":[],\"spatialExtent\":null,\"climates\":[],\"geologies\":[\"Quartenary soils\"],\"producerNames\":[],\"fundingNames\":[],\"fundingAcronyms\":[],\"fullText\":null,\"theiaCategories\":[],\"theiaVariables\":[]},\"pageSize\":10,\"pageSelected\":2}";
        this.mockMvc.perform(post("/observation/changeProducerPage").contentType("application/json").content(payload))
                .andExpect(status().isOk());
        verify(this.observationDocumentLiteRepositoryMock,times(1)).getDatasetOrProducerIds(any(List.class));
        verify(this.observationDocumentLiteRepositoryMock,times(1)).setMatchOperationUsingFilters(anyString(),eq("producer"));
        verify(this.observationDocumentRepositoryMock,times(1)).getProducersPage(any(List.class),any(Pageable.class));
    }

    @Test
    public void getDatastetPage() throws Exception {
        when(observationDocumentLiteRepositoryMock.getDatasetOrProducerIds(any(List.class))).thenReturn(Collections.singletonList(String.class));
        String payload ="{\"filters\":{\"temporalExtents\":[],\"spatialExtent\":null,\"climates\":[],\"geologies\":[\"Quartenary soils\"],\"producerNames\":[],\"fundingNames\":[],\"fundingAcronyms\":[],\"fullText\":null,\"theiaCategories\":[],\"theiaVariables\":[]},\"pageSize\":10,\"pageSelected\":2}";
        this.mockMvc.perform(post("/observation/changeDatasetPage").contentType("application/json").content(payload))
                .andExpect(status().isOk());
        verify(this.observationDocumentLiteRepositoryMock,times(1)).getDatasetOrProducerIds(any(List.class));
        verify(this.observationDocumentLiteRepositoryMock,times(1)).setMatchOperationUsingFilters(anyString(),eq("dataset"));
        verify(this.observationDocumentRepositoryMock,times(1)).getDatasetsPage(any(List.class),any(Pageable.class));
    }
}
